class Vector:
 x: float
 y: float
 z: float

 def new(x: float, y: float, z: float) -> Vector:
   return Vector{x: x, y: y, z: z}
 end

 def times(self, k: float) -> Vector:
  return Vector.new(k * self.x, k * self.y, k * self.z)
 end

 def minus(self, v2: Vector) -> Vector:
  return Vector.new(self.x - v2.x, self.y - v2.y, self.z - v2.z)
 end

 def plus(self, v2: Vector) -> Vector:
  return Vector.new(self.x + v2.x, self.y + v2.y, self.z + v2.z)
 end

 def dot(self, v2: Vector) -> float:
  return self.x * v2.x + self.y * v2.y + self.z * v2.z
 end

 def mag(self) -> float:
  return sqrt(self.x * self.x + self.y * self.y + self.z * self.z)
 end

 def norm(self) -> Vector:
  return self.times(1/self.mag())
 end

 def cross(self, v2: Vector) -> Vector:
  return Vector.new(self.y * v2.z - self.z * v2.y, self.z * v2.x - self.x * v2.z, self.x * v2.y - self.y * v2.x)
 end

end


def toByte(n: float) -> float:
 if n <= 0:
   return 0
 elif n >= 1:
   return 255
 end
 return int(n * 255)
end

class Color:
 const BLACK = Color.new(0,0,0)
 const WHITE = Color.new(1,1,1)
 const GREY = Color.new(0.5, 0.5, 0.5)

 r: float
 g: float
 b: float

 def new(r: float, g: float, b: float) -> Color:
   return Color{r: r, g: g, b: b}
 end

 def scale(self, k: float) -> Color:
  return Color.new(k * self.r, k * self.g, k * self.b)
 end

 def plus(self, c2: Color) -> Color:
  return Color.new(self.r + c2.r, self.g + c2.g, self.b + c2.b)
 end

 def times(self, c2: Color) -> Color:
  return Color.new(self.r * c2.r, self.g * c2.g, self.b * c2.b)
 end

 def toDrawingColor(self) -> float:
  return  255*256*65536 + toByte(self.r) * 65536 + toByte(self.g) * 256 + toByte(self.b)
 end

end


class Camera:
  pos: Vector
  forward: Vector
  right: Vector
  up: Vector

 def new(pos: Vector, lookAt: Vector) -> Camera:
   let down = Vector.new(0, -1, 0)
   let forward = lookAt.minus(pos).norm()
   let right = forward.cross(down).norm().times(1.5)
   let up = forward.cross(right).norm().times(1.5)
   return Camera{pos: pos, forward: forward, right: right, up: up}
 end

end

class Ray:
 start: Vector
 dir: Vector

 def new(start: Vector, dir: Vector) -> Ray:
  return Ray{start: start, dir: dir}
 end
end


class Intersection:
 thing: Thing
 ray: Ray
 dist: float

 def new(t: Thing, r: Ray, dist: float) -> Intersection:
  return Intersection{thing: t, ray: r, dist: dist}
 end
end


trait Surface:
 def roughness(self) -> float
 def diffuse(self, pos: Vector) -> Color
 def specular(self, pos: Vector) ->  Color
 def reflect(self, pos: Vector) -> float
end

trait Thing:
 def surface(self) -> Surface
 def normal(self, pos: Vector) -> Vector
 def intersect(self, ray: Ray) -> Intersection
end

class Light:
 pos: Vector
 color: Color

 def new(pos: Vector, color: Color) -> Light:
  return Light{pos: pos, color: color}
 end
end


class Scene:
 things: List[Thing]
 lights: List[Light]
 camera: Camera
 background: Color
end

class Sphere:
 center: Vector
 radius2: float
 surface_: Surface

 def new(center: Vector, radius: float, s: Surface) -> Sphere:
   return Sphere{center: center, radius2: radius * radius, surface_: s}
 end
end

impl Sphere as Thing:

 def surface(self) -> Surface:
   return self.surface_
 end


 def normal(self, pos: Vector) -> Vector:
  return pos.minus(self.center).norm()
 end

 def intersect(self, r: Ray) -> Intersection:
  let eo = self.center.minus(r.start)
  let v = eo.dot(r.dir)
  mut dist = 1/0
  if v >= 0 :
   let disc = self.radius2 - (eo.dot(eo) - v * v)
   if disc >= 0 :
     dist = v - sqrt(disc)
   end
  end
  return Intersection.new(self, r, dist)
 end

end


class Plane:
 norm: Vector
 offset: float
 surface_: Surface

 def new(normal: Vector, offset: float, s: Surface) -> Plane:
  return Plane{norm: normal, offset: offset, surface_: s}
 end
end

impl Plane as Thing:
 def surface(self) -> Surface:
   return self.surface_
 end

 def normal(self, pos: Vector) -> Vector:
  return self.norm
 end

 def intersect(self, r: Ray) -> Intersection:
  let denom = self.norm.dot(r.dir)
  mut dist = 1/0
  if denom <= 0:
    dist = (self.norm.dot(r.start) + self.offset) / (-denom)
  end
  return Intersection.new(self, r, dist)
 end

end


class Shiny:
end

impl Shiny as Surface:
 def roughness(self) -> float:
  return 250
 end

 def diffuse(self, pos: Vector) -> Color:
  return Color.WHITE
 end

 def specular(self, pos: Vector) -> Color:
  return Color.GREY
 end

 def reflect(self, pos: Vector) -> float:
  return 0.7
 end

end

class Checkerboard:
end

impl Checkerboard as Surface:
 def roughness(self) -> float:
   return 150
 end

 def diffuse(self, pos: Vector) -> Color:
  if (100000 + floor(pos.z) + floor(pos.x)) % 2 != 0 :
   return Color.WHITE
  else :
   return Color.BLACK
  end
 end

 def specular(self, pos: Vector) -> Color:
  return Color.WHITE
 end

 def reflect(self, pos: Vector) -> float:
  if (1000 + int(pos.z) + int(pos.x)) % 2 != 0 :
   return 0.1
  else :
   return 0.7
  end
 end

end


class RayTracer:
 maxDepth = 5
 defaultColor = Color.BLACK

 def intersections(self, r: Ray, s: Scene) -> Intersection:
  mut closest = s.things[0].intersect(r)
  for i in range(1, s.things.size):
   let inter = s.things[i].intersect(r)
   if inter.dist < closest.dist :
     closest = inter
   end
  end
  return closest
 end

 def testRay(self, r: Ray, s: Scene) -> float:
  return self.intersections(r, s).dist
 end

 def traceRay(self, r: Ray, s: Scene, depth: float) -> Color:
  let isect = self.intersections(r, s)
  if isect.dist == 1/0 :
   return s.background
  end
  return self.shade(isect, s, depth)
 end

 def shade(self, isect: Intersection, s: Scene, depth: float) -> Color:
  let d = isect.ray.dir
  let pos = d.times(isect.dist).plus(isect.ray.start)
  let normal = isect.thing.normal(pos)
  let reflectDir = d.minus(normal.times(2 * normal.dot(d)))
  let naturalColor = s.background.plus(self.getNaturalColor(isect.thing, pos, normal, reflectDir, s))
  mut reflectedColor = Color.GREY
  if depth < self.maxDepth :
   reflectedColor = self.getReflectionColor(isect.thing, pos, normal, reflectDir, s, depth)
  end
  return naturalColor.plus(reflectedColor)
 end

 def getReflectionColor(self, t: Thing, pos: Vector, normal: Vector, rd: Vector, s: Scene, depth: float) -> Color:
  return self.traceRay(Ray.new(pos, rd), s, depth + 1).scale(t.surface().reflect(pos))
 end

 def addLight(self, t: Thing, pos: Vector, norm: Vector, rd: Vector, s: Scene, col: Color, l: Light) -> Color:
  let ldis = l.pos.minus(pos)
  let livec = ldis.norm()
  let nearIsect = self.testRay(Ray.new(pos, livec), s)
  let isInShadow = (nearIsect <= ldis.mag())
  if isInShadow :
   return col
  end
  let illum = livec.dot(norm)
  mut lcolor = self.defaultColor
  if illum > 0 :
   lcolor = l.color.scale(illum)
  end
  let specular = livec.dot(rd.norm())
  mut scolor = self.defaultColor
  if specular > 0 :
   scolor = l.color.scale(specular ^ t.surface().roughness())
  end
  let surf = t.surface()
  let diff = surf.diffuse(pos)
  return col.plus(lcolor.times(diff)).plus(scolor.times(t.surface().specular(pos)))
 end

 def getNaturalColor(self, t: Thing, pos: Vector, norm: Vector, rd: Vector, s: Scene) -> Color:
  mut col = self.defaultColor
  for l in s.lights:
   col = self.addLight(t, pos, norm, rd, s, col, l)
  end
  return col
 end

 def getPoint(self, x: float, y: float, cam: Camera) -> Vector:
  return cam.forward.plus(cam.right.times(x / 200)).plus(cam.up.times(y / 200)).norm()
 end

 def render(self, s: Scene, p: Pen, screenWidth: float, screenHeight: float):
  p.strokeColor = 0
  for y in range(screenHeight):
   for x in range(-screenWidth / 2, screenWidth / 2):
     mut yy = floor(y / 2)
     if y % 2 == 0:
       yy = -yy
     end
     let color = self.traceRay(Ray.new(s.camera.pos, self.getPoint(x, yy, s.camera)), s, 0)
     p.fillColor = color.toDrawingColor()
     p.rect(x, yy, 1.5, 1.5)
   end
  end
 end

end

const defaultThings = List[Thing][Plane.new(Vector.new(0,1,0), 0, Checkerboard{}), Sphere.new(Vector.new(0,1,-0.25), 1, Shiny{}), Sphere.new(Vector.new(-1,0.5,1.5),0.5, Shiny{})]
const defaultLights = [Light.new(Vector.new(-2,2.5,0), Color.new(0.49,0.07,0.07)), Light.new(Vector.new(1.5,2.5,1.5), Color.new(0.07,0.07,0.49)), Light.new(Vector.new(1.5,2.5,-1.5), Color.new(0.07,0.49,0.071)), Light.new(Vector.new(0,3.5,0), Color.new(0.21,0.21,0.35))]
const defaultCamera = Camera.new(Vector.new(3,2,4), Vector.new(-1,0.5,0))
const defaultScene = Scene{background: Color.BLACK, things: defaultThings, lights: defaultLights, camera: defaultCamera}

def main():
 let p = screen.newPen()
 let rayTracer = RayTracer{}
 rayTracer.render(defaultScene, p, screen.width, screen.height)

end