struct Monkey:
  items: MutableList[int]
  operation: (int) -> int
  divisible: int
  if_true: int
  if_false: int

def parse(data: str) -> List[Monkey]:
  let result = MutableList[Monkey]()
  let mut index = 0
  let lines = data.split("\n")
  while index < len(lines):
    let raw_items = lines[index + 1].split(":")[1].split(",")
    let items = List[int].init(len(raw_items), int(raw_items[$0].strip()))
    let raw_operation = lines[index + 2].split("=")[1].split(" ")
    let mut operation = lambda(x: int) -> int: x * x
    if raw_operation[1] == "+":
      ::operation = $0 + int(raw_operation[2])
    elif raw_operation[2] != "old":
      ::operation = $0 * int(raw_operation[2])
    let test = int(lines[index + 3].split(" ")[-1])
    let if_true = int(lines[index + 4].split(" ")[-1])
    let if_false = int(lines[index + 5].split(" ")[-1])
    let monkey = Monkey(items, ::operation, test, if_true, if_false)
    result.append(monkey)
    index += 7
  result

def main():
  let monkeys = parse(DATA)
  print(monkeys)


DATA = '''Monkey 0:
  Starting items: 79, 98
  Operation: new = old * 19
  Test: divisible by 23
    If true: throw to monkey 2
    If false: throw to monkey 3

Monkey 1:
  Starting items: 54, 65, 75, 74
  Operation: new = old + 6
  Test: divisible by 19
    If true: throw to monkey 2
    If false: throw to monkey 0

Monkey 2:
  Starting items: 79, 60, 97
  Operation: new = old * old
  Test: divisible by 13
    If true: throw to monkey 1
    If false: throw to monkey 3

Monkey 3:
  Starting items: 74
  Operation: new = old + 3
  Test: divisible by 17
    If true: throw to monkey 0
    If false: throw to monkey 1
'''