"""Raytracer implementation based on Microsoft's corresponding TypeScript demo"""

import graphics.Color

struct Vector:
  x: float
  y: float
  z: float

  def times(k: float) -> Vector:
    Vector(k * x, k * y, k * z)

  def minus(v2: Vector) -> Vector:
    Vector(x - v2.x, y - v2.y, z - v2.z)

  def plus(v2: Vector) -> Vector:
    Vector(x + v2.x, y + v2.y, z + v2.z)

  def dot(v2: Vector) -> float:
    x * v2.x + y * v2.y + z * v2.z

  def mag() -> float:
    sqrt(x * x + y * y + z * z)

  def norm() -> Vector:
    times(1 / mag())

  def cross(v2: Vector) -> Vector:
    Vector(y * v2.z - z * v2.y, z * v2.x - x * v2.z, x * v2.y - y * v2.x)


struct Camera:
  pos: Vector
  forward: Vector
  right: Vector
  up: Vector

  static def lookingAt(pos: Vector, lookAt: Vector) -> Camera:
    let down = Vector(0, -1, 0)
    let forward = lookAt.minus(pos).norm()
    let right = forward.cross(down).norm().times(1.5)
    let up = forward.cross(right).norm().times(1.5)
    Camera(pos, forward, right, up)

struct Ray:
  start: Vector
  dir: Vector

struct Intersection:
  thing: Thing
  ray: Ray
  dist: float

trait Surface:
  def roughness() -> float
  def diffuse(pos: Vector) -> Color
  def specular(pos: Vector) ->  Color
  def reflect(pos: Vector) -> float

trait Thing:
  def surface() -> Surface
  def normal(pos: Vector) -> Vector
  def intersect(ray: Ray) -> Intersection

struct Light:
  pos: Vector
  color: Color

struct Scene:
  things: List[Thing]
  lights: List[Light]
  camera: Camera
  background: Color

struct Sphere:
  center: Vector
  radius2: float
  surface: Surface

  static def create(center: Vector, radius: float, surface: Surface) -> Sphere:
    Sphere(center, radius * radius, surface)


impl Thing for Sphere:

  def surface() -> Surface:
    surface

  def normal(pos: Vector) -> Vector:
    pos.minus(center).norm()

  def intersect(r: Ray) -> Intersection:
    let eo = center.minus(r.start)
    let v = eo.dot(r.dir)
     let mut dist = 1/0
    if v >= 0:
      let disc = radius2 - (eo.dot(eo) - v * v)
      if disc >= 0:
        dist = v - sqrt(disc)

    Intersection(self, r, dist)

struct Plane:
  norm: Vector
  offset: float
  surface: Surface


impl Thing for Plane:
  def surface() -> Surface:
    surface

  def normal(pos: Vector) -> Vector:
    norm

  def intersect(r: Ray) -> Intersection:
    let denom = norm.dot(r.dir)
    let mut dist = 1/0
    if denom <= 0:
      dist = (norm.dot(r.start) + offset) / -denom

    Intersection(self, r, dist)


unit Shiny:

impl Surface for Shiny:
  def roughness() -> float:
    250

  def diffuse(pos: Vector) -> Color:
    Color.WHITE

  def specular(pos: Vector) -> Color:
    Color.GRAY

  def reflect(pos: Vector) -> float:
    0.7

unit Checkerboard:

impl Surface for Checkerboard:
  def roughness() -> float:
    150

  def diffuse(pos: Vector) -> Color:
    if (int(1000 + pos.z) + int(1000 + pos.x)) % 2 != 0 :
      Color.WHITE
    else:
      Color.BLACK

 def specular(pos: Vector) -> Color:
   Color.WHITE

 def reflect(pos: Vector) -> float:
   if (int(1000 + pos.z) + int(1000 + pos.x)) % 2 != 0 :
     0.1
   else:
     0.7


struct RayTracer:
  maxDepth = 5
  defaultColor = Color.BLACK

  def intersections(r: Ray, s: Scene) -> Intersection:
    let mut closest = s.things[0].intersect(r)
    for i in range(1, len(s.things)):
      let inter = s.things[i].intersect(r)
      if inter.dist < closest.dist :
        closest = inter

    closest

  def testRay(r: Ray, s: Scene) -> float:
    intersections(r, s).dist

  def traceRay(r: Ray, s: Scene, depth: float) -> Color:
    let isect = intersections(r, s)
    if isect.dist == 1/0 :
      s.background
    else:
      shade(isect, s, depth)

  def shade(isect: Intersection, s: Scene, depth: float) -> Color:
    let d = isect.ray.dir
    let pos = d.times(isect.dist).plus(isect.ray.start)
    let normal = isect.thing.normal(pos)
    let reflectDir = d.minus(normal.times(2 * normal.dot(d)))
    let naturalColor = s.background.plus(getNaturalColor(isect.thing, pos, normal, reflectDir, s))
    let mut reflectedColor = Color.GRAY
    if depth < maxDepth :
      reflectedColor = getReflectionColor(isect.thing, pos, normal, reflectDir, s, depth)

    naturalColor.plus(reflectedColor)

  def getReflectionColor(t: Thing, pos: Vector, normal: Vector, rd: Vector, s: Scene, depth: float) -> Color:
    traceRay(Ray(pos, rd), s, depth + 1).scale(t.surface().reflect(pos))

  def addLight(t: Thing, pos: Vector, norm: Vector, rd: Vector, s: Scene, col: Color, l: Light) -> Color:
    let ldis = l.pos.minus(pos)
    let livec = ldis.norm()
    let nearIsect = testRay(Ray(pos, livec), s)
    let isInShadow = (nearIsect <= ldis.mag())
    if isInShadow :
      return col

    let illum = livec.dot(norm)
    let mut lcolor = defaultColor
    if illum > 0 :
      lcolor = l.color.scale(illum)

    let specular = livec.dot(rd.norm())
    let mut scolor = defaultColor
    if specular > 0 :
      scolor = l.color.scale(specular ** t.surface().roughness())

    let surf = t.surface()
    let diff = surf.diffuse(pos)
    col.plus(lcolor.times(diff)).plus(scolor.times(t.surface().specular(pos)))

  def getNaturalColor(t: Thing, pos: Vector, norm: Vector, rd: Vector, s: Scene) -> Color:
    let mut col = defaultColor
    for l in s.lights:
      col = addLight(t, pos, norm, rd, s, col, l)

    col

  def getPoint(x: float, y: float, cam: Camera) -> Vector:
    cam.forward.plus(cam.right.times(x / 200)).plus(cam.up.times(y / 200)).norm()

  def render(s: Scene, b: graphics.BitmapImage):
    renderRow(s, b, 0)

  def renderRow(s: Scene, b: graphics.BitmapImage, y: int):
    let scale = 150.0 / min(b.width, b.height)
    let mut yy = y // 2
    if y % 2 == 0:
      yy = -yy-1

    for x in range(0, b.width):
      let color = traceRay(Ray(s.camera.pos, getPoint((x - b.width/2) * scale, yy * scale, s.camera)), s, 0)
      b.set(x, b.height / 2 - yy, color)

    if (y < b.height - 2):
      requestAnimationFrame(lambda: renderRow(s, b, y + 1))


defaultThings = [Plane(Vector(0,1,0), 0, Checkerboard) as Thing, Sphere(Vector(0,1,-0.25), 1, Shiny) as Thing, Sphere(Vector(-1,0.5,1.5),0.5, Shiny) as Thing]
defaultLights = [Light(Vector(-2,2.5,0), Color(0.49,0.07,0.07)), Light(Vector(1.5,2.5,1.5), Color(0.07,0.07,0.49)), Light(Vector(1.5,2.5,-1.5), Color(0.07,0.49,0.071)), Light(Vector(0,3.5,0), Color(0.21,0.21,0.35))]
defaultCamera = Camera.lookingAt(Vector(3,2,4), Vector(-1,0.5,0))
defaultScene = Scene(defaultThings, defaultLights, defaultCamera, Color.BLACK)

def main():
  let rayTracer = RayTracer()
  rayTracer.render(defaultScene, screen)
